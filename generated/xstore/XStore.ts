// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllowMintRequestsSet extends ethereum.Event {
  get params(): AllowMintRequestsSet__Params {
    return new AllowMintRequestsSet__Params(this);
  }
}

export class AllowMintRequestsSet__Params {
  _event: AllowMintRequestsSet;

  constructor(event: AllowMintRequestsSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isAllowed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class BurnFeesSet extends ethereum.Event {
  get params(): BurnFeesSet__Params {
    return new BurnFeesSet__Params(this);
  }
}

export class BurnFeesSet__Params {
  _event: BurnFeesSet;

  constructor(event: BurnFeesSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethBase(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethStep(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class D2AssetAddressSet extends ethereum.Event {
  get params(): D2AssetAddressSet__Params {
    return new D2AssetAddressSet__Params(this);
  }
}

export class D2AssetAddressSet__Params {
  _event: D2AssetAddressSet;

  constructor(event: D2AssetAddressSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _d2Asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class D2AssetSet extends ethereum.Event {
  get params(): D2AssetSet__Params {
    return new D2AssetSet__Params(this);
  }
}

export class D2AssetSet__Params {
  _event: D2AssetSet;

  constructor(event: D2AssetSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class D2HoldingsSet extends ethereum.Event {
  get params(): D2HoldingsSet__Params {
    return new D2HoldingsSet__Params(this);
  }
}

export class D2HoldingsSet__Params {
  _event: D2HoldingsSet;

  constructor(event: D2HoldingsSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _d2Holdings(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DualFeesSet extends ethereum.Event {
  get params(): DualFeesSet__Params {
    return new DualFeesSet__Params(this);
  }
}

export class DualFeesSet__Params {
  _event: DualFeesSet;

  constructor(event: DualFeesSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethBase(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethStep(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EthBalanceSet extends ethereum.Event {
  get params(): EthBalanceSet__Params {
    return new EthBalanceSet__Params(this);
  }
}

export class EthBalanceSet__Params {
  _event: EthBalanceSet;

  constructor(event: EthBalanceSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _ethBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FlipEligOnRedeemSet extends ethereum.Event {
  get params(): FlipEligOnRedeemSet__Params {
    return new FlipEligOnRedeemSet__Params(this);
  }
}

export class FlipEligOnRedeemSet__Params {
  _event: FlipEligOnRedeemSet;

  constructor(event: FlipEligOnRedeemSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _bool(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class HoldingsAdded extends ethereum.Event {
  get params(): HoldingsAdded__Params {
    return new HoldingsAdded__Params(this);
  }
}

export class HoldingsAdded__Params {
  _event: HoldingsAdded;

  constructor(event: HoldingsAdded) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class HoldingsRemoved extends ethereum.Event {
  get params(): HoldingsRemoved__Params {
    return new HoldingsRemoved__Params(this);
  }
}

export class HoldingsRemoved__Params {
  _event: HoldingsRemoved;

  constructor(event: HoldingsRemoved) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IsClosedSet extends ethereum.Event {
  get params(): IsClosedSet__Params {
    return new IsClosedSet__Params(this);
  }
}

export class IsClosedSet__Params {
  _event: IsClosedSet;

  constructor(event: IsClosedSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _isClosed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class IsD2VaultSet extends ethereum.Event {
  get params(): IsD2VaultSet__Params {
    return new IsD2VaultSet__Params(this);
  }
}

export class IsD2VaultSet__Params {
  _event: IsD2VaultSet;

  constructor(event: IsD2VaultSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _isD2Vault(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class IsEligibleSet extends ethereum.Event {
  get params(): IsEligibleSet__Params {
    return new IsEligibleSet__Params(this);
  }
}

export class IsEligibleSet__Params {
  _event: IsEligibleSet;

  constructor(event: IsEligibleSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bool(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class IsExtensionSet extends ethereum.Event {
  get params(): IsExtensionSet__Params {
    return new IsExtensionSet__Params(this);
  }
}

export class IsExtensionSet__Params {
  _event: IsExtensionSet;

  constructor(event: IsExtensionSet) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _isExtension(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class IsFinalizedSet extends ethereum.Event {
  get params(): IsFinalizedSet__Params {
    return new IsFinalizedSet__Params(this);
  }
}

export class IsFinalizedSet__Params {
  _event: IsFinalizedSet;

  constructor(event: IsFinalizedSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _isFinalized(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ManagerSet extends ethereum.Event {
  get params(): ManagerSet__Params {
    return new ManagerSet__Params(this);
  }
}

export class ManagerSet__Params {
  _event: ManagerSet;

  constructor(event: ManagerSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MintFeesSet extends ethereum.Event {
  get params(): MintFeesSet__Params {
    return new MintFeesSet__Params(this);
  }
}

export class MintFeesSet__Params {
  _event: MintFeesSet;

  constructor(event: MintFeesSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethBase(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethStep(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NegateEligibilitySet extends ethereum.Event {
  get params(): NegateEligibilitySet__Params {
    return new NegateEligibilitySet__Params(this);
  }
}

export class NegateEligibilitySet__Params {
  _event: NegateEligibilitySet;

  constructor(event: NegateEligibilitySet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _bool(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class NewVaultAdded extends ethereum.Event {
  get params(): NewVaultAdded__Params {
    return new NewVaultAdded__Params(this);
  }
}

export class NewVaultAdded__Params {
  _event: NewVaultAdded;

  constructor(event: NewVaultAdded) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NftAddressSet extends ethereum.Event {
  get params(): NftAddressSet__Params {
    return new NftAddressSet__Params(this);
  }
}

export class NftAddressSet__Params {
  _event: NftAddressSet;

  constructor(event: NftAddressSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NftSet extends ethereum.Event {
  get params(): NftSet__Params {
    return new NftSet__Params(this);
  }
}

export class NftSet__Params {
  _event: NftSet;

  constructor(event: NftSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RandNonceSet extends ethereum.Event {
  get params(): RandNonceSet__Params {
    return new RandNonceSet__Params(this);
  }
}

export class RandNonceSet__Params {
  _event: RandNonceSet;

  constructor(event: RandNonceSet) {
    this._event = event;
  }

  get _randNonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RequesterSet extends ethereum.Event {
  get params(): RequesterSet__Params {
    return new RequesterSet__Params(this);
  }
}

export class RequesterSet__Params {
  _event: RequesterSet;

  constructor(event: RequesterSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get requester(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ReservesAdded extends ethereum.Event {
  get params(): ReservesAdded__Params {
    return new ReservesAdded__Params(this);
  }
}

export class ReservesAdded__Params {
  _event: ReservesAdded;

  constructor(event: ReservesAdded) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReservesRemoved extends ethereum.Event {
  get params(): ReservesRemoved__Params {
    return new ReservesRemoved__Params(this);
  }
}

export class ReservesRemoved__Params {
  _event: ReservesRemoved;

  constructor(event: ReservesRemoved) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShouldReserveSet extends ethereum.Event {
  get params(): ShouldReserveSet__Params {
    return new ShouldReserveSet__Params(this);
  }
}

export class ShouldReserveSet__Params {
  _event: ShouldReserveSet;

  constructor(event: ShouldReserveSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bool(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SupplierBountySet extends ethereum.Event {
  get params(): SupplierBountySet__Params {
    return new SupplierBountySet__Params(this);
  }
}

export class SupplierBountySet__Params {
  _event: SupplierBountySet;

  constructor(event: SupplierBountySet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethMax(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get length(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenBalanceSet extends ethereum.Event {
  get params(): TokenBalanceSet__Params {
    return new TokenBalanceSet__Params(this);
  }
}

export class TokenBalanceSet__Params {
  _event: TokenBalanceSet;

  constructor(event: TokenBalanceSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _tokenBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class XTokenAddressSet extends ethereum.Event {
  get params(): XTokenAddressSet__Params {
    return new XTokenAddressSet__Params(this);
  }
}

export class XTokenAddressSet__Params {
  _event: XTokenAddressSet;

  constructor(event: XTokenAddressSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class XTokenSet extends ethereum.Event {
  get params(): XTokenSet__Params {
    return new XTokenSet__Params(this);
  }
}

export class XTokenSet__Params {
  _event: XTokenSet;

  constructor(event: XTokenSet) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class XStore__burnFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class XStore__dualFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class XStore__mintFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class XStore__supplierBountyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class XStore extends ethereum.SmartContract {
  static bind(address: Address): XStore {
    return new XStore("XStore", address);
  }

  addNewVault(): BigInt {
    let result = super.call("addNewVault", "addNewVault():(uint256)", []);

    return result[0].toBigInt();
  }

  try_addNewVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("addNewVault", "addNewVault():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowMintRequests(vaultId: BigInt): boolean {
    let result = super.call(
      "allowMintRequests",
      "allowMintRequests(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBoolean();
  }

  try_allowMintRequests(vaultId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowMintRequests",
      "allowMintRequests(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  burnFees(vaultId: BigInt): XStore__burnFeesResult {
    let result = super.call("burnFees", "burnFees(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return new XStore__burnFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_burnFees(vaultId: BigInt): ethereum.CallResult<XStore__burnFeesResult> {
    let result = super.tryCall(
      "burnFees",
      "burnFees(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XStore__burnFeesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  d2Asset(vaultId: BigInt): Address {
    let result = super.call("d2Asset", "d2Asset(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toAddress();
  }

  try_d2Asset(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("d2Asset", "d2Asset(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  d2AssetAddress(vaultId: BigInt): Address {
    let result = super.call(
      "d2AssetAddress",
      "d2AssetAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toAddress();
  }

  try_d2AssetAddress(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "d2AssetAddress",
      "d2AssetAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  d2Holdings(vaultId: BigInt): BigInt {
    let result = super.call("d2Holdings", "d2Holdings(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toBigInt();
  }

  try_d2Holdings(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("d2Holdings", "d2Holdings(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dualFees(vaultId: BigInt): XStore__dualFeesResult {
    let result = super.call("dualFees", "dualFees(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return new XStore__dualFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_dualFees(vaultId: BigInt): ethereum.CallResult<XStore__dualFeesResult> {
    let result = super.tryCall(
      "dualFees",
      "dualFees(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XStore__dualFeesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  ethBalance(vaultId: BigInt): BigInt {
    let result = super.call("ethBalance", "ethBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toBigInt();
  }

  try_ethBalance(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ethBalance", "ethBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flipEligOnRedeem(vaultId: BigInt): boolean {
    let result = super.call(
      "flipEligOnRedeem",
      "flipEligOnRedeem(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBoolean();
  }

  try_flipEligOnRedeem(vaultId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "flipEligOnRedeem",
      "flipEligOnRedeem(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  holdingsAt(vaultId: BigInt, index: BigInt): BigInt {
    let result = super.call(
      "holdingsAt",
      "holdingsAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_holdingsAt(vaultId: BigInt, index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "holdingsAt",
      "holdingsAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  holdingsContains(vaultId: BigInt, elem: BigInt): boolean {
    let result = super.call(
      "holdingsContains",
      "holdingsContains(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(elem)
      ]
    );

    return result[0].toBoolean();
  }

  try_holdingsContains(
    vaultId: BigInt,
    elem: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "holdingsContains",
      "holdingsContains(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(elem)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  holdingsLength(vaultId: BigInt): BigInt {
    let result = super.call(
      "holdingsLength",
      "holdingsLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigInt();
  }

  try_holdingsLength(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "holdingsLength",
      "holdingsLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isClosed(vaultId: BigInt): boolean {
    let result = super.call("isClosed", "isClosed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toBoolean();
  }

  try_isClosed(vaultId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClosed", "isClosed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isD2Vault(vaultId: BigInt): boolean {
    let result = super.call("isD2Vault", "isD2Vault(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toBoolean();
  }

  try_isD2Vault(vaultId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isD2Vault", "isD2Vault(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEligible(vaultId: BigInt, id: BigInt): boolean {
    let result = super.call(
      "isEligible",
      "isEligible(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBoolean();
  }

  try_isEligible(vaultId: BigInt, id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEligible",
      "isEligible(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExtension(param0: Address): boolean {
    let result = super.call("isExtension", "isExtension(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isExtension(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isExtension", "isExtension(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFinalized(vaultId: BigInt): boolean {
    let result = super.call("isFinalized", "isFinalized(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toBoolean();
  }

  try_isFinalized(vaultId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinalized", "isFinalized(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manager(vaultId: BigInt): Address {
    let result = super.call("manager", "manager(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toAddress();
  }

  try_manager(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintFees(vaultId: BigInt): XStore__mintFeesResult {
    let result = super.call("mintFees", "mintFees(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return new XStore__mintFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mintFees(vaultId: BigInt): ethereum.CallResult<XStore__mintFeesResult> {
    let result = super.tryCall(
      "mintFees",
      "mintFees(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XStore__mintFeesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  negateEligibility(vaultId: BigInt): boolean {
    let result = super.call(
      "negateEligibility",
      "negateEligibility(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBoolean();
  }

  try_negateEligibility(vaultId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "negateEligibility",
      "negateEligibility(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nft(vaultId: BigInt): Address {
    let result = super.call("nft", "nft(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toAddress();
  }

  try_nft(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("nft", "nft(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftAddress(vaultId: BigInt): Address {
    let result = super.call("nftAddress", "nftAddress(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toAddress();
  }

  try_nftAddress(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("nftAddress", "nftAddress(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  randNonce(): BigInt {
    let result = super.call("randNonce", "randNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_randNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("randNonce", "randNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requester(vaultId: BigInt, id: BigInt): Address {
    let result = super.call(
      "requester",
      "requester(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toAddress();
  }

  try_requester(vaultId: BigInt, id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "requester",
      "requester(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reservesAt(vaultId: BigInt, index: BigInt): BigInt {
    let result = super.call(
      "reservesAt",
      "reservesAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_reservesAt(vaultId: BigInt, index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reservesAt",
      "reservesAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservesContains(vaultId: BigInt, elem: BigInt): boolean {
    let result = super.call(
      "reservesContains",
      "reservesContains(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(elem)
      ]
    );

    return result[0].toBoolean();
  }

  try_reservesContains(
    vaultId: BigInt,
    elem: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "reservesContains",
      "reservesContains(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(elem)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reservesLength(vaultId: BigInt): BigInt {
    let result = super.call(
      "reservesLength",
      "reservesLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigInt();
  }

  try_reservesLength(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reservesLength",
      "reservesLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shouldReserve(vaultId: BigInt, id: BigInt): boolean {
    let result = super.call(
      "shouldReserve",
      "shouldReserve(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBoolean();
  }

  try_shouldReserve(vaultId: BigInt, id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldReserve",
      "shouldReserve(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supplierBounty(vaultId: BigInt): XStore__supplierBountyResult {
    let result = super.call(
      "supplierBounty",
      "supplierBounty(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return new XStore__supplierBountyResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_supplierBounty(
    vaultId: BigInt
  ): ethereum.CallResult<XStore__supplierBountyResult> {
    let result = super.tryCall(
      "supplierBounty",
      "supplierBounty(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XStore__supplierBountyResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  tokenBalance(vaultId: BigInt): BigInt {
    let result = super.call("tokenBalance", "tokenBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toBigInt();
  }

  try_tokenBalance(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalance",
      "tokenBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultsLength(): BigInt {
    let result = super.call("vaultsLength", "vaultsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultsLength", "vaultsLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  xToken(vaultId: BigInt): Address {
    let result = super.call("xToken", "xToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);

    return result[0].toAddress();
  }

  try_xToken(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("xToken", "xToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  xTokenAddress(vaultId: BigInt): Address {
    let result = super.call(
      "xTokenAddress",
      "xTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toAddress();
  }

  try_xTokenAddress(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "xTokenAddress",
      "xTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddNewVaultCall extends ethereum.Call {
  get inputs(): AddNewVaultCall__Inputs {
    return new AddNewVaultCall__Inputs(this);
  }

  get outputs(): AddNewVaultCall__Outputs {
    return new AddNewVaultCall__Outputs(this);
  }
}

export class AddNewVaultCall__Inputs {
  _call: AddNewVaultCall;

  constructor(call: AddNewVaultCall) {
    this._call = call;
  }
}

export class AddNewVaultCall__Outputs {
  _call: AddNewVaultCall;

  constructor(call: AddNewVaultCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class HoldingsAddCall extends ethereum.Call {
  get inputs(): HoldingsAddCall__Inputs {
    return new HoldingsAddCall__Inputs(this);
  }

  get outputs(): HoldingsAddCall__Outputs {
    return new HoldingsAddCall__Outputs(this);
  }
}

export class HoldingsAddCall__Inputs {
  _call: HoldingsAddCall;

  constructor(call: HoldingsAddCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get elem(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HoldingsAddCall__Outputs {
  _call: HoldingsAddCall;

  constructor(call: HoldingsAddCall) {
    this._call = call;
  }
}

export class HoldingsRemoveCall extends ethereum.Call {
  get inputs(): HoldingsRemoveCall__Inputs {
    return new HoldingsRemoveCall__Inputs(this);
  }

  get outputs(): HoldingsRemoveCall__Outputs {
    return new HoldingsRemoveCall__Outputs(this);
  }
}

export class HoldingsRemoveCall__Inputs {
  _call: HoldingsRemoveCall;

  constructor(call: HoldingsRemoveCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get elem(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HoldingsRemoveCall__Outputs {
  _call: HoldingsRemoveCall;

  constructor(call: HoldingsRemoveCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReservesAddCall extends ethereum.Call {
  get inputs(): ReservesAddCall__Inputs {
    return new ReservesAddCall__Inputs(this);
  }

  get outputs(): ReservesAddCall__Outputs {
    return new ReservesAddCall__Outputs(this);
  }
}

export class ReservesAddCall__Inputs {
  _call: ReservesAddCall;

  constructor(call: ReservesAddCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get elem(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReservesAddCall__Outputs {
  _call: ReservesAddCall;

  constructor(call: ReservesAddCall) {
    this._call = call;
  }
}

export class ReservesRemoveCall extends ethereum.Call {
  get inputs(): ReservesRemoveCall__Inputs {
    return new ReservesRemoveCall__Inputs(this);
  }

  get outputs(): ReservesRemoveCall__Outputs {
    return new ReservesRemoveCall__Outputs(this);
  }
}

export class ReservesRemoveCall__Inputs {
  _call: ReservesRemoveCall;

  constructor(call: ReservesRemoveCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get elem(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReservesRemoveCall__Outputs {
  _call: ReservesRemoveCall;

  constructor(call: ReservesRemoveCall) {
    this._call = call;
  }
}

export class SetAllowMintRequestsCall extends ethereum.Call {
  get inputs(): SetAllowMintRequestsCall__Inputs {
    return new SetAllowMintRequestsCall__Inputs(this);
  }

  get outputs(): SetAllowMintRequestsCall__Outputs {
    return new SetAllowMintRequestsCall__Outputs(this);
  }
}

export class SetAllowMintRequestsCall__Inputs {
  _call: SetAllowMintRequestsCall;

  constructor(call: SetAllowMintRequestsCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isAllowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAllowMintRequestsCall__Outputs {
  _call: SetAllowMintRequestsCall;

  constructor(call: SetAllowMintRequestsCall) {
    this._call = call;
  }
}

export class SetBurnFeesCall extends ethereum.Call {
  get inputs(): SetBurnFeesCall__Inputs {
    return new SetBurnFeesCall__Inputs(this);
  }

  get outputs(): SetBurnFeesCall__Outputs {
    return new SetBurnFeesCall__Outputs(this);
  }
}

export class SetBurnFeesCall__Inputs {
  _call: SetBurnFeesCall;

  constructor(call: SetBurnFeesCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ethBase(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ethStep(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetBurnFeesCall__Outputs {
  _call: SetBurnFeesCall;

  constructor(call: SetBurnFeesCall) {
    this._call = call;
  }
}

export class SetD2AssetCall extends ethereum.Call {
  get inputs(): SetD2AssetCall__Inputs {
    return new SetD2AssetCall__Inputs(this);
  }

  get outputs(): SetD2AssetCall__Outputs {
    return new SetD2AssetCall__Outputs(this);
  }
}

export class SetD2AssetCall__Inputs {
  _call: SetD2AssetCall;

  constructor(call: SetD2AssetCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetD2AssetCall__Outputs {
  _call: SetD2AssetCall;

  constructor(call: SetD2AssetCall) {
    this._call = call;
  }
}

export class SetD2AssetAddressCall extends ethereum.Call {
  get inputs(): SetD2AssetAddressCall__Inputs {
    return new SetD2AssetAddressCall__Inputs(this);
  }

  get outputs(): SetD2AssetAddressCall__Outputs {
    return new SetD2AssetAddressCall__Outputs(this);
  }
}

export class SetD2AssetAddressCall__Inputs {
  _call: SetD2AssetAddressCall;

  constructor(call: SetD2AssetAddressCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _d2Asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetD2AssetAddressCall__Outputs {
  _call: SetD2AssetAddressCall;

  constructor(call: SetD2AssetAddressCall) {
    this._call = call;
  }
}

export class SetD2HoldingsCall extends ethereum.Call {
  get inputs(): SetD2HoldingsCall__Inputs {
    return new SetD2HoldingsCall__Inputs(this);
  }

  get outputs(): SetD2HoldingsCall__Outputs {
    return new SetD2HoldingsCall__Outputs(this);
  }
}

export class SetD2HoldingsCall__Inputs {
  _call: SetD2HoldingsCall;

  constructor(call: SetD2HoldingsCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _d2Holdings(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetD2HoldingsCall__Outputs {
  _call: SetD2HoldingsCall;

  constructor(call: SetD2HoldingsCall) {
    this._call = call;
  }
}

export class SetDualFeesCall extends ethereum.Call {
  get inputs(): SetDualFeesCall__Inputs {
    return new SetDualFeesCall__Inputs(this);
  }

  get outputs(): SetDualFeesCall__Outputs {
    return new SetDualFeesCall__Outputs(this);
  }
}

export class SetDualFeesCall__Inputs {
  _call: SetDualFeesCall;

  constructor(call: SetDualFeesCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ethBase(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ethStep(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDualFeesCall__Outputs {
  _call: SetDualFeesCall;

  constructor(call: SetDualFeesCall) {
    this._call = call;
  }
}

export class SetEthBalanceCall extends ethereum.Call {
  get inputs(): SetEthBalanceCall__Inputs {
    return new SetEthBalanceCall__Inputs(this);
  }

  get outputs(): SetEthBalanceCall__Outputs {
    return new SetEthBalanceCall__Outputs(this);
  }
}

export class SetEthBalanceCall__Inputs {
  _call: SetEthBalanceCall;

  constructor(call: SetEthBalanceCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ethBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetEthBalanceCall__Outputs {
  _call: SetEthBalanceCall;

  constructor(call: SetEthBalanceCall) {
    this._call = call;
  }
}

export class SetFlipEligOnRedeemCall extends ethereum.Call {
  get inputs(): SetFlipEligOnRedeemCall__Inputs {
    return new SetFlipEligOnRedeemCall__Inputs(this);
  }

  get outputs(): SetFlipEligOnRedeemCall__Outputs {
    return new SetFlipEligOnRedeemCall__Outputs(this);
  }
}

export class SetFlipEligOnRedeemCall__Inputs {
  _call: SetFlipEligOnRedeemCall;

  constructor(call: SetFlipEligOnRedeemCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get flipElig(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFlipEligOnRedeemCall__Outputs {
  _call: SetFlipEligOnRedeemCall;

  constructor(call: SetFlipEligOnRedeemCall) {
    this._call = call;
  }
}

export class SetIsClosedCall extends ethereum.Call {
  get inputs(): SetIsClosedCall__Inputs {
    return new SetIsClosedCall__Inputs(this);
  }

  get outputs(): SetIsClosedCall__Outputs {
    return new SetIsClosedCall__Outputs(this);
  }
}

export class SetIsClosedCall__Inputs {
  _call: SetIsClosedCall;

  constructor(call: SetIsClosedCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _isClosed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIsClosedCall__Outputs {
  _call: SetIsClosedCall;

  constructor(call: SetIsClosedCall) {
    this._call = call;
  }
}

export class SetIsD2VaultCall extends ethereum.Call {
  get inputs(): SetIsD2VaultCall__Inputs {
    return new SetIsD2VaultCall__Inputs(this);
  }

  get outputs(): SetIsD2VaultCall__Outputs {
    return new SetIsD2VaultCall__Outputs(this);
  }
}

export class SetIsD2VaultCall__Inputs {
  _call: SetIsD2VaultCall;

  constructor(call: SetIsD2VaultCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _isD2Vault(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIsD2VaultCall__Outputs {
  _call: SetIsD2VaultCall;

  constructor(call: SetIsD2VaultCall) {
    this._call = call;
  }
}

export class SetIsEligibleCall extends ethereum.Call {
  get inputs(): SetIsEligibleCall__Inputs {
    return new SetIsEligibleCall__Inputs(this);
  }

  get outputs(): SetIsEligibleCall__Outputs {
    return new SetIsEligibleCall__Outputs(this);
  }
}

export class SetIsEligibleCall__Inputs {
  _call: SetIsEligibleCall;

  constructor(call: SetIsEligibleCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bool(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetIsEligibleCall__Outputs {
  _call: SetIsEligibleCall;

  constructor(call: SetIsEligibleCall) {
    this._call = call;
  }
}

export class SetIsExtensionCall extends ethereum.Call {
  get inputs(): SetIsExtensionCall__Inputs {
    return new SetIsExtensionCall__Inputs(this);
  }

  get outputs(): SetIsExtensionCall__Outputs {
    return new SetIsExtensionCall__Outputs(this);
  }
}

export class SetIsExtensionCall__Inputs {
  _call: SetIsExtensionCall;

  constructor(call: SetIsExtensionCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isExtension(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIsExtensionCall__Outputs {
  _call: SetIsExtensionCall;

  constructor(call: SetIsExtensionCall) {
    this._call = call;
  }
}

export class SetIsFinalizedCall extends ethereum.Call {
  get inputs(): SetIsFinalizedCall__Inputs {
    return new SetIsFinalizedCall__Inputs(this);
  }

  get outputs(): SetIsFinalizedCall__Outputs {
    return new SetIsFinalizedCall__Outputs(this);
  }
}

export class SetIsFinalizedCall__Inputs {
  _call: SetIsFinalizedCall;

  constructor(call: SetIsFinalizedCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _isFinalized(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIsFinalizedCall__Outputs {
  _call: SetIsFinalizedCall;

  constructor(call: SetIsFinalizedCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _manager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetMintFeesCall extends ethereum.Call {
  get inputs(): SetMintFeesCall__Inputs {
    return new SetMintFeesCall__Inputs(this);
  }

  get outputs(): SetMintFeesCall__Outputs {
    return new SetMintFeesCall__Outputs(this);
  }
}

export class SetMintFeesCall__Inputs {
  _call: SetMintFeesCall;

  constructor(call: SetMintFeesCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ethBase(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ethStep(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetMintFeesCall__Outputs {
  _call: SetMintFeesCall;

  constructor(call: SetMintFeesCall) {
    this._call = call;
  }
}

export class SetNegateEligibilityCall extends ethereum.Call {
  get inputs(): SetNegateEligibilityCall__Inputs {
    return new SetNegateEligibilityCall__Inputs(this);
  }

  get outputs(): SetNegateEligibilityCall__Outputs {
    return new SetNegateEligibilityCall__Outputs(this);
  }
}

export class SetNegateEligibilityCall__Inputs {
  _call: SetNegateEligibilityCall;

  constructor(call: SetNegateEligibilityCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get negateElig(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetNegateEligibilityCall__Outputs {
  _call: SetNegateEligibilityCall;

  constructor(call: SetNegateEligibilityCall) {
    this._call = call;
  }
}

export class SetNftCall extends ethereum.Call {
  get inputs(): SetNftCall__Inputs {
    return new SetNftCall__Inputs(this);
  }

  get outputs(): SetNftCall__Outputs {
    return new SetNftCall__Outputs(this);
  }
}

export class SetNftCall__Inputs {
  _call: SetNftCall;

  constructor(call: SetNftCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNftCall__Outputs {
  _call: SetNftCall;

  constructor(call: SetNftCall) {
    this._call = call;
  }
}

export class SetNftAddressCall extends ethereum.Call {
  get inputs(): SetNftAddressCall__Inputs {
    return new SetNftAddressCall__Inputs(this);
  }

  get outputs(): SetNftAddressCall__Outputs {
    return new SetNftAddressCall__Outputs(this);
  }
}

export class SetNftAddressCall__Inputs {
  _call: SetNftAddressCall;

  constructor(call: SetNftAddressCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetNftAddressCall__Outputs {
  _call: SetNftAddressCall;

  constructor(call: SetNftAddressCall) {
    this._call = call;
  }
}

export class SetRandNonceCall extends ethereum.Call {
  get inputs(): SetRandNonceCall__Inputs {
    return new SetRandNonceCall__Inputs(this);
  }

  get outputs(): SetRandNonceCall__Outputs {
    return new SetRandNonceCall__Outputs(this);
  }
}

export class SetRandNonceCall__Inputs {
  _call: SetRandNonceCall;

  constructor(call: SetRandNonceCall) {
    this._call = call;
  }

  get _randNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRandNonceCall__Outputs {
  _call: SetRandNonceCall;

  constructor(call: SetRandNonceCall) {
    this._call = call;
  }
}

export class SetRequesterCall extends ethereum.Call {
  get inputs(): SetRequesterCall__Inputs {
    return new SetRequesterCall__Inputs(this);
  }

  get outputs(): SetRequesterCall__Outputs {
    return new SetRequesterCall__Outputs(this);
  }
}

export class SetRequesterCall__Inputs {
  _call: SetRequesterCall;

  constructor(call: SetRequesterCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _requester(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetRequesterCall__Outputs {
  _call: SetRequesterCall;

  constructor(call: SetRequesterCall) {
    this._call = call;
  }
}

export class SetShouldReserveCall extends ethereum.Call {
  get inputs(): SetShouldReserveCall__Inputs {
    return new SetShouldReserveCall__Inputs(this);
  }

  get outputs(): SetShouldReserveCall__Outputs {
    return new SetShouldReserveCall__Outputs(this);
  }
}

export class SetShouldReserveCall__Inputs {
  _call: SetShouldReserveCall;

  constructor(call: SetShouldReserveCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _shouldReserve(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetShouldReserveCall__Outputs {
  _call: SetShouldReserveCall;

  constructor(call: SetShouldReserveCall) {
    this._call = call;
  }
}

export class SetSupplierBountyCall extends ethereum.Call {
  get inputs(): SetSupplierBountyCall__Inputs {
    return new SetSupplierBountyCall__Inputs(this);
  }

  get outputs(): SetSupplierBountyCall__Outputs {
    return new SetSupplierBountyCall__Outputs(this);
  }
}

export class SetSupplierBountyCall__Inputs {
  _call: SetSupplierBountyCall;

  constructor(call: SetSupplierBountyCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ethMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get length(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetSupplierBountyCall__Outputs {
  _call: SetSupplierBountyCall;

  constructor(call: SetSupplierBountyCall) {
    this._call = call;
  }
}

export class SetTokenBalanceCall extends ethereum.Call {
  get inputs(): SetTokenBalanceCall__Inputs {
    return new SetTokenBalanceCall__Inputs(this);
  }

  get outputs(): SetTokenBalanceCall__Outputs {
    return new SetTokenBalanceCall__Outputs(this);
  }
}

export class SetTokenBalanceCall__Inputs {
  _call: SetTokenBalanceCall;

  constructor(call: SetTokenBalanceCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenBalanceCall__Outputs {
  _call: SetTokenBalanceCall;

  constructor(call: SetTokenBalanceCall) {
    this._call = call;
  }
}

export class SetXTokenCall extends ethereum.Call {
  get inputs(): SetXTokenCall__Inputs {
    return new SetXTokenCall__Inputs(this);
  }

  get outputs(): SetXTokenCall__Outputs {
    return new SetXTokenCall__Outputs(this);
  }
}

export class SetXTokenCall__Inputs {
  _call: SetXTokenCall;

  constructor(call: SetXTokenCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetXTokenCall__Outputs {
  _call: SetXTokenCall;

  constructor(call: SetXTokenCall) {
    this._call = call;
  }
}

export class SetXTokenAddressCall extends ethereum.Call {
  get inputs(): SetXTokenAddressCall__Inputs {
    return new SetXTokenAddressCall__Inputs(this);
  }

  get outputs(): SetXTokenAddressCall__Outputs {
    return new SetXTokenAddressCall__Outputs(this);
  }
}

export class SetXTokenAddressCall__Inputs {
  _call: SetXTokenAddressCall;

  constructor(call: SetXTokenAddressCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _xTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetXTokenAddressCall__Outputs {
  _call: SetXTokenAddressCall;

  constructor(call: SetXTokenAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
